{"version":3,"sources":["context/actions.ts","services/index.ts","context/reducer.ts","components/transaction.tsx","components/unconfirmed-tx.tsx","components/wallet.tsx","components/block.tsx","components/header.tsx","context/context-provider.tsx","components/blockchain.tsx","components/control-panel.tsx","components/status-message.tsx","App.tsx","context/connector.tsx","reportWebVitals.js","index.js"],"names":["ActionType","blockchainAction","payload","type","BLOCKCHAIN","blockAction","BLOCK","hostDetailsAction","HOST_DETAILS","unconfirmedTxPoolAction","UNCONFIRMED_TX_POOL","statusMessageAction","STATUS_MESSAGE","HOST_NAME","process","REACT_APP_HOST_NAME","fetchBlockchain","a","fetch","response","ok","json","Error","status","mineBlock","method","body","JSON","stringify","b","message","console","log","fetchHosts","fetchUnconfirmedTxPool","spendCoinRelay","host","to","amount","address","resp","fetchControlPanel","dispatch","hostDetails","e","unconfirmedTxPool","pool","Object","values","StatusLevel","initialState","blockchain","blocks","statusMessage","reducer","state","action","clone","parse","hostArray","forEach","push","ipAddress","hostname","parseInt","split","sortedHosts","sort","first","second","CLEAR_HOSTS","level","TxOut","txOData","formatKey","scriptPubKey","value","TxIn","txInData","txid","vout","scriptSig","substring","key","length","Transaction","txData","className","timestamp","toString","map","txO","index","vin","txIn","UnconfirmedTx","unconfirmedTxData","Buffer","from","Wallet","totalAmount","useState","setTo","setAmount","pay","ERROR","onClick","navigator","clipboard","writeText","onChange","event","target","rows","placeholder","Direction","HoverElement","isHovering","setIsHovering","onMouseOver","onMouseOut","style","position","zIndex","height","Header","href","GlobalStateContext","React","createContext","warn","FirstcoinStateProvider","children","useReducer","Provider","Block","blockData","last","direction","expand","setExpand","duration","hash","previousHash","difficultyLevel","transactions","tx","Forwards","Button","fetching","setFetching","mine","block","src","Blockchain","useEffect","chain","f","messagesEndRef","useRef","current","scrollIntoView","behavior","ref","ControlPanel","hostDetail","StatusMessage","setTimeout","BLANK","connect","Component","props","Consumer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5765c58d.chunk.js","sourcesContent":["import { Blockchain, IBlock, IHostDetails, IStatusMessage, ITransaction } from \"./reducer\"\n\nexport enum ActionType {\n    BLOCKCHAIN=\"BLOCKCHAIN\",\n    BLOCK=\"BLOCK\",\n    HOST_DETAILS=\"HOST_DETAILS\",\n    UNCONFIRMED_TX_POOL=\"UNCONFIRMED_TX_POOL\",\n    CLEAR_HOSTS=\"CLEAR_HOSTS\",\n    STATUS_MESSAGE=\"STATUS_MESSAGE\"\n}\n\nexport interface IAction<T> {\n    type: ActionType;\n    payload: T\n}\n\nexport const blockchainAction = (payload: Blockchain) : IAction<Blockchain> => {\n    return {\n        type: ActionType.BLOCKCHAIN,\n        payload: payload\n    }\n}\n\nexport const blockAction = (payload: IBlock) : IAction<IBlock> => {\n    return {\n        type: ActionType.BLOCK,\n        payload: payload\n    }\n}\n\n\nexport const hostDetailsAction = (payload: IHostDetails[]) : IAction<IHostDetails[]> => {\n    return {\n        type: ActionType.HOST_DETAILS,\n        payload: payload\n    }\n}\n\nexport const clearHostDetailsAction = (payload: {}) : IAction<{}> => {\n    return {\n        type: ActionType.CLEAR_HOSTS,\n        payload: payload\n    }\n}\n\ninterface Pool{\n    pool: ITransaction[]\n}\n\nexport const unconfirmedTxPoolAction = (payload: Pool) : IAction<Pool> => {\n    return {\n        type: ActionType.UNCONFIRMED_TX_POOL,\n        payload: payload\n    }\n}\n\nexport const statusMessageAction = (payload: IStatusMessage) : IAction<IStatusMessage> => {\n    return {\n        type: ActionType.STATUS_MESSAGE,\n        payload: payload\n    }\n}","import { clearHostDetailsAction, hostDetailsAction, IAction, unconfirmedTxPoolAction } from '../context/actions';\nimport {Blockchain, IHostDetails, IBlock, ITransaction} from '../context/reducer'\n\nvar HOST_NAME = process.env.REACT_APP_HOST_NAME ? process.env.REACT_APP_HOST_NAME : \"\"\n\nexport const fetchBlockchain : () => Promise<Blockchain> = async () => {\n    const response = await fetch(`${HOST_NAME}/block-chain`);\n    if (response.ok){\n      return response.json()\n    }\n    throw new Error(\"fetch blockchain returns \"+response.status)\n}\n\nexport const mineBlock : () => Promise<IBlock> = async () => {\n  const response = await fetch(`${HOST_NAME}/create-block`,{\n    method: \"POST\",\n    body:JSON.stringify({a: 1, b: 'Textual content'})\n  });\n  if (response.ok){\n    return response.json()\n  }\n  const message = await response.json()\n  console.log(message)\n  throw new Error(\"create blockchain returns \"+response.status)\n}\n\nexport const fetchHosts : () => Promise<IHostDetails[]> = async () => {\n  const response = await fetch(`${HOST_NAME}/hosts`,{\n    method: \"POST\",\n    body: JSON.stringify({})\n  });\n  if (response.ok){\n    return response.json()\n  }\n  throw new Error(\"fetch hosts returns \"+response.status)\n}\n\ntype txPoolObject = { [key: string]: ITransaction };\n\nexport const fetchUnconfirmedTxPool : () => Promise<txPoolObject> = async () => {\n  const response = await fetch(`${HOST_NAME}/txpool`,{\n    method: \"GET\"\n  });\n  if (response.ok){\n    return response.json()\n  }\n  throw new Error(\"fetch host details returns \"+response.status)\n}\n\n//this sends the request to the main node - which passes the request on to the internal network\nexport const spendCoinRelay : (host: string, to: string, amount: number) => Promise<txPoolObject> = async (host, to, amount) => {\n  const response = await fetch(`${HOST_NAME}/spend-coin-relay`,{\n    method: \"POST\",\n    body: JSON.stringify({host:host, address: to, amount: amount})\n  });\n  \n  if (response.ok){\n    return response.json()\n  }\n  \n  const resp = await response.json()\n  throw new Error(`pay from host ${host} returns ${response.status} ${resp.message}`)\n}\n\nexport const fetchControlPanel = async (dispatch: React.Dispatch<IAction<any>>) => {\n  try{\n      const hostDetails = await fetchHosts()  \n      try{\n        dispatch(hostDetailsAction({\n          ...hostDetails\n        }))\n      }catch(e){\n        console.log(e)\n      }\n      \n      const unconfirmedTxPool = await fetchUnconfirmedTxPool()\n      dispatch(unconfirmedTxPoolAction({\n          pool: Object.values(unconfirmedTxPool)\n      }))   \n      \n  }catch(e){\n      console.log(e)\n  }\n}","import { format } from 'path';\nimport { ActionType, hostDetailsAction, IAction } from './actions';\n\nexport interface IBlock{\n    index: number;\n    previousHash: string;\n    transactions: ITransaction[];\n    timestamp: number;\n    difficultyLevel: number;\n    nonce: number;\n    hash: string;\n}\n\nexport interface ITxOutputs{\n    scriptPubKey: string;\n    value: number;\n}\n\nexport interface ITxInputs{\n    txid: string;\n    vout: number;\n    scriptSig: string;\n}\n\nexport interface ITransaction{\n    txid: string;\n    locktime: number;\n    vin: ITxInputs[];\n    vout: ITxOutputs[];\n    timestamp: number;\n}\n\nexport interface Blockchain{\n    blocks: IBlock[]\n}\n\nexport enum StatusLevel {\n    ERROR = \"ERROR\",\n    SUCCESS = \"SUCCESS\",\n    NOTICE = \"NOTICE\",\n    BLANK = \"BLANK\"\n  }\n\nexport interface IStatusMessage{\n    message: string;\n    level?: StatusLevel;\n}\n\nexport interface IHostDetails {\n    address: string;\n    totalAmount: number;\n    hostname: string;\n}\n\nexport interface InitialState {\n    blockchain: Blockchain;\n    hostDetails: IHostDetails[];\n    unconfirmedTxPool: ITransaction[];\n    statusMessage: IStatusMessage;\n}\n\nexport const initialState: InitialState = {\n    blockchain: {\n        blocks: []\n    },\n    hostDetails: [],\n    unconfirmedTxPool: [],\n    statusMessage:{\n        message:\"\"\n    }\n}\n\n\nconst reducer : (state: InitialState, action: IAction<any>) => InitialState = (state, action) => {\n    console.log(\"-------------state before-----------------\")\n    console.log(state)\n    console.log(\"----------------action--------------------\")\n    console.log(action)\n\n    switch (action.type) {\n        case ActionType.BLOCKCHAIN:{\n            const newState = {\n                ...state,\n                blockchain: {\n                    ...state.blockchain,\n                    ...action.payload\n                }\n            }\n            \n            return newState\n        }\n            \n        case ActionType.BLOCK:{\n            const newState = {\n                ...state,\n                blockchain: {\n                    ...state.blockchain,\n                    ...action.payload\n                }\n            }\n            \n            return newState\n        }\n        \n        case ActionType.HOST_DETAILS:{\n            const clone:{[key: number]: IHostDetails} = JSON.parse(JSON.stringify(action.payload));\n            const hostArray: IHostDetails[] = []\n            Object.values(clone).forEach(hostDetails => hostArray.push(hostDetails))\n            \n            const ipAddress = (hostname : string) => {\n                return parseInt(hostname.split(\":\")[1])\n            }\n        \n            const sortedHosts = hostArray.sort((first: IHostDetails, second: IHostDetails) => {\n                if (ipAddress(first.hostname) < ipAddress(second.hostname)){\n                    return -1\n                }\n              \n                return 1\n            })\n                \n            const newState = {\n                ...state,\n                hostDetails: sortedHosts,\n            }\n            \n            return newState\n        }\n        \n        case ActionType.CLEAR_HOSTS:{                        \n            const newState = {\n                ...state,\n                hostDetails: []\n            }\n            \n            return newState\n        }\n        \n        case ActionType.UNCONFIRMED_TX_POOL:{                        \n            const newState = {\n                ...state,\n                unconfirmedTxPool: action.payload.pool\n            }\n            \n            return newState\n        }\n        \n        case ActionType.STATUS_MESSAGE:{     \n            if (action.payload.message !== state.statusMessage.message && action.payload.level !== state.statusMessage.level){\n                const newState = {\n                    ...state,\n                    statusMessage: {...action.payload}\n                }\n                \n                return newState\n            }\n                               \n            \n            return state\n        }\n        \n      default:\n        return state;\n    }\n  }\n  \n  export default reducer","\nimport 'animate.css'\nimport './block.css'\nimport {ITransaction, ITxInputs, ITxOutputs} from '../context/reducer'\n\nconst Transaction = ({txData}: {txData: ITransaction}) => {\n    return (\n        <div className=\"text-xs\">\n            <div>\n                id: {txData.txid.substring(0,5)}...\n            </div> \n            <div>\n                timestamp: {txData.timestamp.toString().substring(0,10)}...\n            </div>\n            <div>\n                txO: [\n                        {txData.vout.map((txO, index) => {\n                            return (\n                                <div key={index} className=\"pl2\">\n                                    <TxOut txOData={txO}/>\n                                </div>\n                            )\n                    })}\n                ]\n            </div>\n            <div>\n                txIn: [\n                        {txData.vin.map((txIn, index) => {\n                            return (\n                                <div key={index} className=\"pl2\">\n                                    <TxIn txInData={txIn}/>\n                                </div>\n                            )\n                    })}\n                ]\n            </div>\n        </div> \n    )\n}\n\nconst TxOut = ({txOData}: {txOData: ITxOutputs}) => {\n    return (\n        <div>\n            <div>\n                scriptPubKey: {formatKey(txOData.scriptPubKey)}\n            </div>\n            <div>\n                value: {txOData.value}\n            </div>\n        </div>\n    )\n}\n\nconst TxIn = ({txInData}: {txInData: ITxInputs}) => {\n    return (\n        <div>\n            <div>\n                txid: {txInData.txid}\n            </div>\n            <div>\n                vout: {txInData.vout}\n            </div>\n            <div>\n                scriptSig: {txInData.scriptSig.substring(0,5)} ...\n            </div>\n        </div>\n    )\n}\n\nexport const formatKey : (key: string) => string = (key: string) => {\n    return(\n        `${key.substring(0,5)}...${key.substring(20,25)}...${key.substring(key.length - 6,key.length - 1)}`\n    )\n}\n\nexport default Transaction","import { ITransaction } from \"../context/reducer\"\nimport { formatKey } from \"./transaction\"\n\nconst UnconfirmedTx = ({unconfirmedTxData}: {unconfirmedTxData: ITransaction}) => {\n    return(\n        <div className=\"border border-black w-11/12 mb-10 bg-white\">\n            <div className=\"p-2\">\n                <span className=\"font-bold\">In tx:</span>{formatKey(unconfirmedTxData.vin[0].txid)}\n            </div>\n            <div className=\"p-2\">\n                <span className=\"font-bold\">pay to:</span> {formatKey(Buffer.from(unconfirmedTxData.vout[0].scriptPubKey, 'base64').toString('ascii'))}  <span className=\"font-bold\">amount: </span>{unconfirmedTxData.vout[0].value}\n            </div>\n            <div className=\"p-2\">\n                 {unconfirmedTxData?.vout[1]&&\n                     <>\n                        <span className=\"font-bold\">pay from:</span> {formatKey(Buffer.from(unconfirmedTxData?.vout[1]?.scriptPubKey, 'base64').toString('ascii'))}  <span className=\"font-bold\">tx out: </span>{unconfirmedTxData?.vout[1]?.value}\n                     </>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default UnconfirmedTx","import { useState, useRef, useEffect } from 'react'\nimport { IAction, statusMessageAction } from '../context/actions'\nimport { spendCoinRelay } from '../services'\nimport { formatKey } from './transaction'\nimport { fetchControlPanel } from \"../services\"\n\nimport './wallet.css'\nimport { StatusLevel } from '../context/reducer'\n\ninterface IWallet{\n    colour?: string;\n    address: string;\n    totalAmount: number;\n    host: string;\n    dispatch: React.Dispatch<IAction<any>>;\n}\n\nconst Wallet = ({host, address, totalAmount, dispatch}: IWallet) => {\n    const [to, setTo] = useState(\"\")\n    const [amount, setAmount] = useState(0)\n    const copy = () => {navigator.clipboard.writeText(address)}\n    const pay = async () => {\n        try{\n            const response = await spendCoinRelay(host, to, amount)\n            fetchControlPanel(dispatch)\n            setTo(\"\")\n            setAmount(0)\n        }catch(e: any){\n            dispatch(statusMessageAction({\n                level: StatusLevel.ERROR,\n                message: e\n            }))\n            console.log(e)\n        }\n    }\n\n    return (\n        <div className=\"rounded-md text-white p-4 min-h-100 w-4/5 bg-trendyBlue mb-10\">\n            <div className=\"justify-content flex space-x-4 pb-4\">\n                <div className=\"flex items-center\">\n                    <div>\n                        address: {formatKey(Buffer.from(address, 'base64').toString('ascii'))}\n                    </div>\n                </div>\n                <div onClick={copy} className={`h-10 w-16 bg-trendyYellow text-white flex justify-center items-center transform transition duration-500 hover:scale-105 cursor-pointer font-semibold py-2 px-4 rounded`}>\n                    Copy\n                </div> \n                \n            </div>\n            <div className=\"mb-4 flex\">\n                <div className=\"flex align-center space-between\">\n                    <div className=\"text-white pr-4 whitespace-nowrap flex flex-col justify-center\"><div className=\"\">Pay:</div></div>\n                    <textarea value={amount ? amount: \"\"} onChange={(event) => setAmount(parseInt(event.target.value))} className=\"form-textarea mt-1 mr-2 block w-9/12 border-white overflow-hidden\" rows={1} placeholder=\"Amount\"></textarea>\n                    <textarea value={to ? to : \"\"} onChange={(event) => setTo(event.target.value)} className=\"form-textarea mt-1 mr-2 block w-9/12 border-white overflow-hidden\" rows={1} placeholder=\"To\"></textarea>\n                </div>\n                <div onClick={pay} className={`h-10 w-16 mt-1 bg-trendyYellow text-white flex justify-center items-center transform transition duration-500 hover:scale-105 cursor-pointer font-semibold py-2 px-4 rounded`}>\n                    Pay\n                </div> \n            </div>\n            <div>\n                Balance: {totalAmount}\n            </div>\n        </div>\n    )\n}\n\nexport default Wallet","import 'animate.css'\nimport './block.css'\nimport {IBlock} from '../context/reducer'\nimport { useState } from 'react'\nimport Transaction from './transaction'\nimport '../styles/theme.css'\nimport AnimateHeight from 'react-animate-height';\n\nexport enum Direction {\n  Backwards,\n  Forwards\n}\n\ninterface IBlockProps{\n  blockData: IBlock; \n  last: boolean;\n  direction: Direction;\n}\n\nconst Block = ({blockData, last, direction}: IBlockProps) => {\n   const [expand, setExpand] = useState(false)\n   \n    return (\n      <div className=\"w-full flex flex-col items-center\">\n        <div className=\"w-5/12 transform transition duration-500 hover:scale-105 flex flex-col items-center\">\n        <AnimateHeight\n          duration={ 500 }\n          height={ expand ? 'auto': 150}\n          className=\"w-full border-2 border-trendyGrey rounded-lg animate__animated animate__rubberBand\"\n        >\n        <div onClick={() => setExpand(!expand)} className=\" cursor-pointer\">\n            <div className={`rounded text-trendyGrey bg-trendyGreen tran block p-2 overflow-hidden`}>\n              <div>\n                index: {blockData.index}\n              </div>\n              <div>\n                hash: {blockData.hash.substring(0,10)}...\n              </div>          \n              <div>\n                prev: {blockData.previousHash ? blockData.previousHash.substring(0,10) : null}\n              </div>\n              <div>\n                difficulty: {blockData.difficultyLevel}\n              </div>\n              <div>\n                time: {blockData.timestamp}\n              </div>\n              <div>\n                transactions: {blockData.transactions.map((tx, index) => {\n                  return <Transaction key={index} txData={tx}/>\n                })}\n              </div>\n            </div>\n\n          {/* {!displayArrow && <img className=\"\" src={'minecoin.gif'} alt=\"loading...\" />} */}\n\n        </div>\n        </AnimateHeight>\n        </div>\n        \n        {direction == Direction.Forwards &&\n          !last && <span className=\"arrow arrow-down\"></span>\n        }\n      </div>\n      \n\n        \n    )\n}\n\nexport default Block","import {Context} from '../context/context-provider'\nimport {useState} from 'react';\n\nconst Header = ({state, dispatch}: Context) => {\n\n    return(\n        <div className=\"fixed z-50 w-8/12 bg-background2 flex flex-col items-center h-24 border-b border-grey mb-10\">\n            <div className=\"text-trendyBlue font-bold text-xl\">Firstcoin</div>\n            <div className=\"flex space-between w-full\">\n                <div className=\"w-2/6\"><div className='ml-10'><HoverElement/></div></div>\n                <div className=\"flex text-trendyGrey justify-center font-bold w-2/6 whitespace-nowrap\">Freddie O'Donnell</div>\n                <a href=\"https://github.com/FreddieFruitSticks\" target=\"_blank\" className=\"flex justify-end w-2/6 text-trendyBlue underline font-bold whitespace-nowrap\"><div className='mr-10'>My Github Profile</div></a>\n            </div>\n            <div className=\"text-trendyGrey\">Cape Town</div>\n        </div>\n    )\n}\n\nconst HoverElement = ({}) => {\n    const [isHovering, setIsHovering] = useState(false);\n\n  const handleMouseOver = () => {\n    setIsHovering(true);\n  };\n\n  const handleMouseOut = () => {\n    setIsHovering(false);\n  };\n    return (<div>\n      <div>\n        <div className=\"w-3/6 underline cursor-help whitespace-nowrap\" onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\n            How this works? \n        </div>\n\n        {isHovering && (\n          <div\n            style={{\n                position: 'fixed',\n                zIndex: 1000,\n                height: !isHovering ? 0 : 'auto'\n            }} >\n            <div className=\"bg-oliveGreen text-white border-1 rounded border-white p-2 max-w-lg\">\n                    This is a demonstration blockchain, and it's very simple to use! In the middle you will see the blockchain. \n                    Click on \"Mine\" to manually mine a block. \n                <div className='mt-3'>\n                    On the right you will see the \"Control Panel\". This is where you can transfer coin between wallets. \n                    Click \"copy\" to copy the address you want to pay <b>to</b>. Select an amount you wish to pay, and click \"pay\". \n                    Only the first miner (wallet) mines which is rewarded 100 coin + 1 coin per transaction.\n                </div>\n                <div className='mt-3'>\n                    In the control panel you will also see the unconfired transaction pool. It will indicate the payer, payee, transaction id used \n                    to confirm the payment, and the \"vout\" which is the change awarded to the payer.\n                </div>\n                <div className='mt-3'>\n                    Happy mining!\n                </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>)\n}\n\nexport default Header","import React, { ReactChild, useReducer } from 'react'\nimport { IAction } from './actions'\nimport reducer, { InitialState, initialState } from './reducer'\n\nexport interface Context {\n    state: InitialState,\n    dispatch: React.Dispatch<IAction<any>>\n}\n\nexport const GlobalStateContext = React.createContext<Context>({\n    state: initialState,\n    dispatch: (action: IAction<any>) => console.warn(`WARNING! Dispatch function not set. Attemting to dispatch ${action}`)\n})\n\nconst FirstcoinStateProvider = ({children}:{children: ReactChild}) => {\n    let localState = {}\n    \n    let [state, dispatch] = useReducer(reducer, {...initialState, ...localState})\n    console.log(\"-------------state after-----------------\")\n    console.log(state)\n    \n    return (\n        <GlobalStateContext.Provider value={{state, dispatch}}>\n            {children}\n        </GlobalStateContext.Provider>\n    )\n}\n\nexport default FirstcoinStateProvider","import 'animate.css'\nimport './block.css'\nimport Block, { Direction } from './block'\nimport { useEffect, useRef, useState } from 'react'\nimport { fetchBlockchain, fetchControlPanel, mineBlock } from '../services'\nimport { Context } from '../context/context-provider'\nimport { blockAction, blockchainAction, IAction } from '../context/actions'\nimport './style.css'\nimport React from 'react'\n\ninterface IBlockchain extends Context{\n}\n\nconst Blockchain = ({state, dispatch}: IBlockchain) => {\n    useEffect(() => {\n        async function f(){\n            try{\n                const chain = await fetchBlockchain()\n                dispatch(blockchainAction({\n                    blocks: chain.blocks\n                }))\n            }catch(e){\n                console.log(e)\n            }\n        }\n\n        f()\n\n    },[dispatch])\n    const messagesEndRef = useRef<any>(null)\n\n    const scrollToBottom = () => {\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }\n    \n    useEffect(scrollToBottom, [state.blockchain]);\n    \n    return (\n        <div>\n            <div className=\"grid grid-cols-1 gap-4\">\n            <div className='w-full font-bold flex flex-col items-center'>\n                Firstcoin Blockchain\n                <span className=\"arrow arrow-down\"></span>\n            </div>\n                {state.blockchain.blocks.map((block, index) => {\n                    return (\n                        <Block \n                        key={index} \n                        direction={Direction.Forwards} \n                        last={index === state.blockchain.blocks.length - 1} \n                        blockData={block}\n                    />     \n                )})}\n                <div ref={messagesEndRef}/>\n\n            </div>\n            <div className=\"pt-10 flex justify-center items-center w-full\">\n                <Button dispatch={dispatch}/>\n            </div>\n        </div>\n        \n    )\n}\n\nconst Button : any = ({dispatch}:{dispatch:React.Dispatch<IAction<any>>}) => {\n    const [fetching, setFetching] = useState(false)\n    const mine = async () => {\n        try{\n            setFetching(true)\n            const block = await mineBlock()\n            dispatch(blockAction(block))\n            fetchControlPanel(dispatch)\n        }catch(e){\n            console.log(e)\n        }\n        setFetching(false)\n\n    }\n    return (\n        <div>\n            {fetching ?\n            <div className=\"flex justify-center\">\n                <img className=\"w-3/6\" src=\"gntl-mining.gif\">\n                </img>\n            </div>\n            :\n            <div onClick={mine} className={`h-24 w-36 mb-28 bg-trendyBlue text-white flex justify-center items-center transform transition duration-500 hover:scale-105 cursor-pointer font-semibold py-2 px-4 rounded`}>\n                Mine\n            </div>}\n        </div> \n    )\n}\n\nexport default Blockchain","import { useEffect, useRef } from \"react\"\nimport { Context } from \"../context/context-provider\"\nimport { fetchControlPanel } from \"../services\"\nimport UnconfirmedTx from \"./unconfirmed-tx\"\nimport Wallet from \"./wallet\"\nimport Header from './header'\n\ninterface IControlPanel extends Context{\n}\n\nconst ControlPanel = ({state, dispatch}: IControlPanel) => {\n    useEffect(() => {\n        fetchControlPanel(dispatch)\n    },[dispatch])\n\n    const messagesEndRef = useRef<any>(null)\n\n    const scrollToBottom = () => {\n        if (state?.unconfirmedTxPool.length > 0){\n            messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n        }\n    }\n    \n    useEffect(scrollToBottom, [state?.unconfirmedTxPool]);\n    \n    return (\n        <div className=\"flex flex-col items-center border-4 border-trendyTurquoise rounded-lg fixed right-0 h-screen bottom-0 w-4/12 overflow-y-scroll\">\n            <div className=\"flex mb-16 items-center justify-center mt-10 font-trendyGrey text-3xl font-medium\">\n                Control Panel\n            </div>\n            <div className=\"flex mb-10 items-center justify-center font-trendyGrey text-xl font-medium\">\n                Global Wallets\n            </div>\n            {state?.hostDetails?.map((hostDetail, index) => {\n                return (\n                    <Wallet key={index} dispatch={dispatch} host={hostDetail.hostname} address={hostDetail.address} totalAmount={hostDetail.totalAmount}/>\n                )\n            })}\n            <div className=\"flex mb-10 items-center justify-center font-trendyGrey text-xl font-medium\">\n                Unconfirmed Transaction pool\n            </div>\n            {state?.unconfirmedTxPool?.map((tx, index) => {\n                return (\n                    <UnconfirmedTx key={index} unconfirmedTxData={tx}/>\n                )\n            })}\n            <div ref={messagesEndRef}/>\n        </div>\n    )\n}\n\nexport default ControlPanel","import { useEffect } from \"react\"\nimport { statusMessageAction } from \"../context/actions\"\nimport { Context } from \"../context/context-provider\"\nimport { StatusLevel } from \"../context/reducer\"\nimport './status-message.css'\n\ninterface IStatusMessage extends Context{\n}\n\nconst StatusMessage = ({state, dispatch}: IStatusMessage) => {\n    useEffect(() => {\n        setTimeout(() => dispatch(statusMessageAction({\n            message:\"\",\n            level: StatusLevel.BLANK,\n        })), 10000)\n    },[state.statusMessage])\n    \n    return (\n        <div>\n            <div \n                style={{\n                    position: 'fixed',\n                    zIndex: 1000,\n                    height: !state.statusMessage.level ? 0 : 'auto'\n                }} \n                className={`status-message-${state.statusMessage.level} ${state.statusMessage.level && state.statusMessage.level != StatusLevel.BLANK ? \"visible\" : \"invisible\"} w-8/12 p-10`}\n            >\n                {state?.statusMessage?.message &&\n                    `${state?.statusMessage?.message}`\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default StatusMessage","import './App.css';\nimport Header from './components/header'\nimport { connect } from './context/connector';\nimport { Context } from './context/context-provider';\nimport Blockchain from './components/blockchain';\nimport ControlPanel from './components/control-panel';\nimport StatusMessage from './components/status-message';\n\nfunction App({state, dispatch}: Context) {\n  return (\n    <div className=\"bg-background\">\n      <div className=\"w-8/12\">\n        <StatusMessage {...{state, dispatch}}/>\n        <Header {...{state, dispatch}}/>\n        <div className=\"pt-28\">\n\n        <Blockchain {...{state, dispatch}}/>\n        </div>\n      </div>\n      <ControlPanel {...{state, dispatch}}/>\n    </div>\n  );\n}\n\nexport default connect(App);\n","import React from 'react'\nimport {GlobalStateContext} from './context-provider'\n\nexport const connect = (Component: any) => {\n    return (props: any) => (\n        <GlobalStateContext.Consumer>\n            {value => {\n                const {state, dispatch} = value\n                return (\n                    <Component {...props} state={state} dispatch={dispatch}/>\n                )\n            }}\n        </GlobalStateContext.Consumer>\n    )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport FirstcoinStateProvider from \"../src/context/context-provider\"\nimport './styles/theme.css'\n\nReactDOM.render(\n  <FirstcoinStateProvider>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </FirstcoinStateProvider>\n,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}