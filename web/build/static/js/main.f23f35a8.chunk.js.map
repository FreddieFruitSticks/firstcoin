{"version":3,"sources":["context/actions.ts","components/header.tsx","context/reducer.ts","components/block.tsx","context/context-provider.tsx","components/transaction.tsx","services/index.ts","components/blockchain.tsx","components/unconfirmed-tx.tsx","components/wallet.tsx","components/control-panel.tsx","components/status-message.tsx","App.tsx","context/connector.tsx","reportWebVitals.js","index.js"],"names":["ActionType","Header","state","dispatch","className","StatusLevel","blockchainAction","payload","type","BLOCKCHAIN","unconfirmedTxPoolAction","UNCONFIRMED_TX_POOL","statusMessageAction","STATUS_MESSAGE","Direction","initialState","blockchain","blocks","hostDetails","unconfirmedTxPool","statusMessage","message","reducer","action","console","log","BLOCK","HOST_DETAILS","clone","JSON","parse","stringify","ipAddress","hostname","parseInt","split","sortedHosts","sort","first","second","CLEAR_HOSTS","pool","level","GlobalStateContext","React","createContext","warn","FirstcoinStateProvider","children","useReducer","Provider","value","TxOut","txOData","formatKey","scriptPubKey","TxIn","txInData","txid","vout","scriptSig","substring","key","length","Transaction","txData","timestamp","toString","map","txO","index","vin","txIn","Block","blockData","last","direction","useState","expand","setExpand","duration","height","onClick","hash","previousHash","difficultyLevel","transactions","tx","Forwards","fetchBlockchain","a","fetch","response","ok","json","Error","status","mineBlock","method","body","b","fetchHosts","fetchUnconfirmedTxPool","spendCoinRelay","host","to","amount","address","resp","fetchControlPanel","e","Object","values","Button","fetching","setFetching","mine","block","src","Blockchain","useEffect","chain","f","messagesEndRef","useRef","current","scrollIntoView","behavior","ref","UnconfirmedTx","unconfirmedTxData","Wallet","totalAmount","setTo","setAmount","pay","ERROR","atob","navigator","clipboard","writeText","onChange","event","target","rows","placeholder","ControlPanel","hostDetail","StatusMessage","setTimeout","BLANK","style","position","zIndex","connect","Component","props","Consumer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f23f35a8.chunk.js","sourcesContent":["import { Blockchain, IBlock, IHostDetails, IStatusMessage, ITransaction } from \"./reducer\"\n\nexport enum ActionType {\n    BLOCKCHAIN=\"BLOCKCHAIN\",\n    BLOCK=\"BLOCK\",\n    HOST_DETAILS=\"HOST_DETAILS\",\n    UNCONFIRMED_TX_POOL=\"UNCONFIRMED_TX_POOL\",\n    CLEAR_HOSTS=\"CLEAR_HOSTS\",\n    STATUS_MESSAGE=\"STATUS_MESSAGE\"\n}\n\nexport interface IAction<T> {\n    type: ActionType;\n    payload: T\n}\n\nexport const blockchainAction = (payload: Blockchain) : IAction<Blockchain> => {\n    return {\n        type: ActionType.BLOCKCHAIN,\n        payload: payload\n    }\n}\n\nexport const blockAction = (payload: IBlock) : IAction<IBlock> => {\n    return {\n        type: ActionType.BLOCK,\n        payload: payload\n    }\n}\n\n\nexport const hostDetailsAction = (payload: IHostDetails[]) : IAction<IHostDetails[]> => {\n    return {\n        type: ActionType.HOST_DETAILS,\n        payload: payload\n    }\n}\n\nexport const clearHostDetailsAction = (payload: {}) : IAction<{}> => {\n    return {\n        type: ActionType.CLEAR_HOSTS,\n        payload: payload\n    }\n}\n\ninterface Pool{\n    pool: ITransaction[]\n}\n\nexport const unconfirmedTxPoolAction = (payload: Pool) : IAction<Pool> => {\n    return {\n        type: ActionType.UNCONFIRMED_TX_POOL,\n        payload: payload\n    }\n}\n\nexport const statusMessageAction = (payload: IStatusMessage) : IAction<IStatusMessage> => {\n    return {\n        type: ActionType.STATUS_MESSAGE,\n        payload: payload\n    }\n}","import {Context} from '../context/context-provider'\n\nconst Header = ({state, dispatch}: Context) => {\n\n    return(\n        <div className=\"bg-background2 flex flex-col items-center h-24 border-b border-grey mb-10\">\n            <div className=\"text-trendyBlue font-bold text-xl\">Firstcoin</div>\n            <div className=\"text-trendyGrey font-bold\">Freddie O'Donnell</div>\n            <div className=\"text-trendyGrey\">Cape Town</div>\n        </div>\n    )\n}\n\nexport default Header","import { ActionType, hostDetailsAction, IAction } from './actions';\n\nexport interface IBlock{\n    index: number;\n    previousHash: string;\n    transactions: ITransaction[];\n    timestamp: number;\n    difficultyLevel: number;\n    nonce: number;\n    hash: string;\n}\n\nexport interface ITxOutputs{\n    scriptPubKey: string;\n    value: number;\n}\n\nexport interface ITxInputs{\n    txid: string;\n    vout: number;\n    scriptSig: string;\n}\n\nexport interface ITransaction{\n    txid: string;\n    locktime: number;\n    vin: ITxInputs[];\n    vout: ITxOutputs[];\n    timestamp: number;\n}\n\nexport interface Blockchain{\n    blocks: IBlock[]\n}\n\nexport enum StatusLevel {\n    ERROR = \"ERROR\",\n    SUCCESS = \"SUCCESS\",\n    NOTICE = \"NOTICE\",\n    BLANK = \"BLANK\"\n  }\n\nexport interface IStatusMessage{\n    message: string;\n    level?: StatusLevel;\n}\n\nexport interface IHostDetails {\n    address: string;\n    totalAmount: number;\n    hostname: string;\n}\n\nexport interface InitialState {\n    blockchain: Blockchain;\n    hostDetails: IHostDetails[];\n    unconfirmedTxPool: ITransaction[];\n    statusMessage: IStatusMessage;\n}\n\nexport const initialState: InitialState = {\n    blockchain: {\n        blocks: []\n    },\n    hostDetails: [],\n    unconfirmedTxPool: [],\n    statusMessage:{\n        message:\"\"\n    }\n}\n\n\nconst reducer : (state: InitialState, action: IAction<any>) => InitialState = (state, action) => {\n    console.log(\"-------------state before-----------------\")\n    console.log(state)\n    console.log(\"----------------action--------------------\")\n    console.log(action)\n\n    switch (action.type) {\n        case ActionType.BLOCKCHAIN:{\n            const newState = {\n                ...state,\n                blockchain: {\n                    ...state.blockchain,\n                    ...action.payload\n                }\n            }\n            \n            return newState\n        }\n            \n        case ActionType.BLOCK:{\n            const newState = {\n                ...state,\n                blockchain: {\n                    ...state.blockchain,\n                    ...action.payload\n                }\n            }\n            \n            return newState\n        }\n        \n        case ActionType.HOST_DETAILS:{\n            const clone = JSON.parse(JSON.stringify(action.payload));\n            \n            const ipAddress = (hostname : string) => {\n                return parseInt(hostname.split(\":\")[1])\n            }\n        \n            const sortedHosts = clone.sort((first: IHostDetails, second: IHostDetails) => {\n                if (ipAddress(first.hostname) < ipAddress(second.hostname)){\n                    return -1\n                }\n              \n                return 1\n            })\n                \n            const newState = {\n                ...state,\n                hostDetails: sortedHosts,\n            }\n            \n            return newState\n        }\n        \n        case ActionType.CLEAR_HOSTS:{                        \n            const newState = {\n                ...state,\n                hostDetails: []\n            }\n            \n            return newState\n        }\n        \n        case ActionType.UNCONFIRMED_TX_POOL:{                        \n            const newState = {\n                ...state,\n                unconfirmedTxPool: action.payload.pool\n            }\n            \n            return newState\n        }\n        \n        case ActionType.STATUS_MESSAGE:{     \n            if (action.payload.message !== state.statusMessage.message && action.payload.level !== state.statusMessage.level){\n                const newState = {\n                    ...state,\n                    statusMessage: {...action.payload}\n                }\n                \n                return newState\n            }\n                               \n            \n            return state\n        }\n        \n      default:\n        return state;\n    }\n  }\n  \n  export default reducer","import 'animate.css'\nimport './block.css'\nimport {IBlock} from '../context/reducer'\nimport { useState } from 'react'\nimport Transaction from './transaction'\nimport '../styles/theme.css'\nimport AnimateHeight from 'react-animate-height';\n\nexport enum Direction {\n  Backwards,\n  Forwards\n}\n\ninterface IBlockProps{\n  blockData: IBlock; \n  last: boolean;\n  direction: Direction;\n}\n\nconst Block = ({blockData, last, direction}: IBlockProps) => {\n   const [expand, setExpand] = useState(false)\n   \n    return (\n      <div className=\"w-full flex flex-col items-center\">\n        <div className=\"w-5/12 transform transition duration-500 hover:scale-105 flex flex-col items-center\">\n        <AnimateHeight\n          duration={ 500 }\n          height={ expand ? 'auto': 150}\n          className=\"w-full border-2 border-trendyGrey rounded-lg animate__animated animate__rubberBand\"\n        >\n        <div onClick={() => setExpand(!expand)} className=\" cursor-pointer\">\n            <div className={`rounded text-trendyGrey bg-trendyGreen tran block p-2 overflow-hidden`}>\n              <div>\n                index: {blockData.index}\n              </div>\n              <div>\n                hash: {blockData.hash.substring(0,10)}...\n              </div>          \n              <div>\n                prev: {blockData.previousHash ? blockData.previousHash.substring(0,10) : null}\n              </div>\n              <div>\n                difficulty: {blockData.difficultyLevel}\n              </div>\n              <div>\n                time: {blockData.timestamp}\n              </div>\n              <div>\n                transactions: {blockData.transactions.map((tx, index) => {\n                  return <Transaction key={index} txData={tx}/>\n                })}\n              </div>\n            </div>\n\n          {/* {!displayArrow && <img className=\"\" src={'minecoin.gif'} alt=\"loading...\" />} */}\n\n        </div>\n        </AnimateHeight>\n        </div>\n        \n        {direction == Direction.Forwards &&\n          !last && <span className=\"arrow arrow-down\"></span>\n        }\n      </div>\n      \n\n        \n    )\n}\n\nexport default Block","import React, { ReactChild, useReducer } from 'react'\nimport { IAction } from './actions'\nimport reducer, { InitialState, initialState } from './reducer'\n\nexport interface Context {\n    state: InitialState,\n    dispatch: React.Dispatch<IAction<any>>\n}\n\nexport const GlobalStateContext = React.createContext<Context>({\n    state: initialState,\n    dispatch: (action: IAction<any>) => console.warn(`WARNING! Dispatch function not set. Attemting to dispatch ${action}`)\n})\n\nconst FirstcoinStateProvider = ({children}:{children: ReactChild}) => {\n    let localState = {}\n    \n    let [state, dispatch] = useReducer(reducer, {...initialState, ...localState})\n    console.log(\"-------------state after-----------------\")\n    console.log(state)\n    \n    return (\n        <GlobalStateContext.Provider value={{state, dispatch}}>\n            {children}\n        </GlobalStateContext.Provider>\n    )\n}\n\nexport default FirstcoinStateProvider","\nimport 'animate.css'\nimport './block.css'\nimport {ITransaction, ITxInputs, ITxOutputs} from '../context/reducer'\n\nconst Transaction = ({txData}: {txData: ITransaction}) => {\n    return (\n        <div className=\"text-xs\">\n            <div>\n                id: {txData.txid.substring(0,5)}...\n            </div> \n            <div>\n                timestamp: {txData.timestamp.toString().substring(0,10)}...\n            </div>\n            <div>\n                txO: [\n                        {txData.vout.map((txO, index) => {\n                            return (\n                                <div key={index} className=\"pl2\">\n                                    <TxOut txOData={txO}/>\n                                </div>\n                            )\n                    })}\n                ]\n            </div>\n            <div>\n                txIn: [\n                        {txData.vin.map((txIn, index) => {\n                            return (\n                                <div key={index} className=\"pl2\">\n                                    <TxIn txInData={txIn}/>\n                                </div>\n                            )\n                    })}\n                ]\n            </div>\n        </div> \n    )\n}\n\nconst TxOut = ({txOData}: {txOData: ITxOutputs}) => {\n    return (\n        <div>\n            <div>\n                scriptPubKey: {formatKey(txOData.scriptPubKey)}\n            </div>\n            <div>\n                value: {txOData.value}\n            </div>\n        </div>\n    )\n}\n\nconst TxIn = ({txInData}: {txInData: ITxInputs}) => {\n    return (\n        <div>\n            <div>\n                txid: {txInData.txid}\n            </div>\n            <div>\n                vout: {txInData.vout}\n            </div>\n            <div>\n                scriptSig: {txInData.scriptSig.substring(0,5)} ...\n            </div>\n        </div>\n    )\n}\n\nexport const formatKey : (key: string) => string = (key: string) => {\n    return(\n        `${key.substring(0,5)}...${key.substring(20,25)}...${key.substring(key.length - 6,key.length - 1)}`\n    )\n}\n\nexport default Transaction","import { clearHostDetailsAction, hostDetailsAction, IAction, unconfirmedTxPoolAction } from '../context/actions';\nimport {Blockchain, IHostDetails, IBlock, ITransaction} from '../context/reducer'\n\nexport const fetchBlockchain : () => Promise<Blockchain> = async () => {\n    const response = await fetch(`/block-chain`);\n    if (response.ok){\n      return response.json()\n    }\n    throw new Error(\"fetch blockchain returns \"+response.status)\n}\n\nexport const mineBlock : () => Promise<IBlock> = async () => {\n  const response = await fetch(`/create-block`,{\n    method: \"POST\",\n    body:JSON.stringify({a: 1, b: 'Textual content'})\n  });\n  if (response.ok){\n    return response.json()\n  }\n  const message = await response.json()\n  console.log(message)\n  throw new Error(\"create blockchain returns \"+response.status)\n}\n\nexport const fetchHosts : () => Promise<IHostDetails[]> = async () => {\n  const response = await fetch(`/hosts`,{\n    method: \"POST\",\n    body: JSON.stringify({})\n  });\n  if (response.ok){\n    return response.json()\n  }\n  throw new Error(\"fetch hosts returns \"+response.status)\n}\n\ntype txPoolObject = { [key: string]: ITransaction };\n\nexport const fetchUnconfirmedTxPool : () => Promise<txPoolObject> = async () => {\n  const response = await fetch(`/txpool`,{\n    method: \"GET\"\n  });\n  if (response.ok){\n    return response.json()\n  }\n  throw new Error(\"fetch host details returns \"+response.status)\n}\n\n//this sends the request to the main node - which passes the request on to the internal network\nexport const spendCoinRelay : (host: string, to: string, amount: number) => Promise<txPoolObject> = async (host, to, amount) => {\n  const response = await fetch(`/spend-coin-relay`,{\n    method: \"POST\",\n    body: JSON.stringify({host:host, address: to, amount: amount})\n  });\n  \n  if (response.ok){\n    return response.json()\n  }\n  \n  const resp = await response.json()\n  throw new Error(`pay from host ${host} returns ${response.status} ${resp.message}`)\n}\n\nexport const fetchControlPanel = async (dispatch: React.Dispatch<IAction<any>>) => {\n  try{\n      const hostDetails = await fetchHosts()  \n      try{\n        dispatch(hostDetailsAction({\n          ...hostDetails\n        }))\n      }catch(e){\n        console.log(e)\n      }\n      \n      const unconfirmedTxPool = await fetchUnconfirmedTxPool()\n      dispatch(unconfirmedTxPoolAction({\n          pool: Object.values(unconfirmedTxPool)\n      }))   \n      \n  }catch(e){\n      console.log(e)\n  }\n}","import 'animate.css'\nimport './block.css'\nimport Block, { Direction } from './block'\nimport { useEffect, useRef, useState } from 'react'\nimport { fetchBlockchain, fetchControlPanel, mineBlock } from '../services'\nimport { Context } from '../context/context-provider'\nimport { blockAction, blockchainAction, IAction } from '../context/actions'\nimport './style.css'\nimport React from 'react'\n\ninterface IBlockchain extends Context{\n}\n\nconst Blockchain = ({state, dispatch}: IBlockchain) => {\n    useEffect(() => {\n        async function f(){\n            try{\n                const chain = await fetchBlockchain()\n                dispatch(blockchainAction({\n                    blocks: chain.blocks\n                }))\n            }catch(e){\n                console.log(e)\n            }\n        }\n\n        f()\n\n    },[dispatch])\n    const messagesEndRef = useRef<any>(null)\n\n    const scrollToBottom = () => {\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }\n    \n    useEffect(scrollToBottom, [state.blockchain]);\n    \n    return (\n        <div>\n            <div className=\"grid grid-cols-1 gap-4\">\n                {state.blockchain.blocks.map((block, index) => {\n                    return (\n                        <Block \n                        key={index} \n                        direction={Direction.Forwards} \n                        last={index === state.blockchain.blocks.length - 1} \n                        blockData={block}\n                    />     \n                )})}\n                <div ref={messagesEndRef}/>\n\n            </div>\n            <div className=\"pt-10 flex justify-center items-center w-full\">\n                <Button dispatch={dispatch}/>\n            </div>\n        </div>\n        \n    )\n}\n\nconst Button : any = ({dispatch}:{dispatch:React.Dispatch<IAction<any>>}) => {\n    const [fetching, setFetching] = useState(false)\n    const mine = async () => {\n        try{\n            setFetching(true)\n            const block = await mineBlock()\n            dispatch(blockAction(block))\n            fetchControlPanel(dispatch)\n        }catch(e){\n            console.log(e)\n        }\n        setFetching(false)\n\n    }\n    return (\n        <div>\n            {fetching ?\n            <div className=\"flex justify-center\">\n                <img className=\"w-3/6\" src=\"gntl-mining.gif\">\n                </img>\n            </div>\n            :\n            <div onClick={mine} className={`h-24 w-36 mb-28 bg-trendyBlue text-white flex justify-center items-center transform transition duration-500 hover:scale-105 cursor-pointer font-semibold py-2 px-4 rounded`}>\n                Mine\n            </div>}\n        </div> \n    )\n}\n\nexport default Blockchain","import { ITransaction } from \"../context/reducer\"\nimport { formatKey } from \"./transaction\"\n\nconst UnconfirmedTx = ({unconfirmedTxData}: {unconfirmedTxData: ITransaction}) => {\n    return(\n        <div className=\"border border-black w-11/12 h-24 mb-10 bg-white\">\n            <div className=\"p-2\">\n                using tx: {formatKey(unconfirmedTxData.vin[0].txid)}\n            </div>\n            <div className=\"p-2\">\n                pay to: {formatKey(unconfirmedTxData.vout[0].scriptPubKey)}  amount: {unconfirmedTxData.vout[0].value}\n            </div>\n                 {unconfirmedTxData?.vout[1]&&\n                     <>\n                        {formatKey(unconfirmedTxData?.vout[1]?.scriptPubKey)}  amount: {unconfirmedTxData?.vout[1]?.value}\n                     </>\n                }\n            <div>\n            </div>\n        </div>\n    )\n}\n\nexport default UnconfirmedTx","import { useState } from 'react'\nimport { IAction, statusMessageAction } from '../context/actions'\nimport { spendCoinRelay } from '../services'\nimport { formatKey } from './transaction'\nimport { fetchControlPanel } from \"../services\"\n\nimport './wallet.css'\nimport { StatusLevel } from '../context/reducer'\n\ninterface IWallet{\n    colour?: string;\n    address: string;\n    totalAmount: number;\n    host: string;\n    dispatch: React.Dispatch<IAction<any>>;\n}\n\nconst Wallet = ({host, address, totalAmount, dispatch}: IWallet) => {\n    const [to, setTo] = useState(\"\")\n    const [amount, setAmount] = useState(0)\n    const copy = () => {navigator.clipboard.writeText(address)}\n    const pay = async () => {\n        try{\n            const response = await spendCoinRelay(host, to, amount)\n            fetchControlPanel(dispatch)\n        }catch(e: any){\n            dispatch(statusMessageAction({\n                level: StatusLevel.ERROR,\n                message: e\n            }))\n            console.log(e)\n        }\n    }\n    return (\n        <div className=\"rounded-md text-white p-4 min-h-100 w-4/5 bg-trendyBlue mb-10\">\n            <div className=\"justify-content flex space-x-4 pb-4\">\n                <div className=\"flex items-center\">\n                    <div>\n                        address: {formatKey(atob(address))}\n                    </div>\n                </div>\n                <div onClick={copy} className={`h-10 w-16 bg-trendyYellow text-white flex justify-center items-center transform transition duration-500 hover:scale-105 cursor-pointer font-semibold py-2 px-4 rounded`}>\n                    Copy\n                </div> \n                \n            </div>\n            <div className=\"mb-4 flex\">\n                <div className=\"flex align-center space-between\">\n                    <div className=\"text-white pr-4 whitespace-nowrap flex flex-col justify-center\"><div className=\"\">Pay:</div></div>\n                    <textarea onChange={(event) => setAmount(parseInt(event.target.value))} className=\"form-textarea mt-1 mr-2 block w-9/12 border-white overflow-hidden\" rows={1} placeholder=\"Amount\"></textarea>\n                    <textarea onChange={(event) => setTo(event.target.value)} className=\"form-textarea mt-1 mr-2 block w-9/12 border-white overflow-hidden\" rows={1} placeholder=\"To\"></textarea>\n                </div>\n                <div onClick={pay} className={`h-10 w-16 mt-1 bg-trendyYellow text-white flex justify-center items-center transform transition duration-500 hover:scale-105 cursor-pointer font-semibold py-2 px-4 rounded`}>\n                    Pay\n                </div> \n            </div>\n            <div>\n                Balance: {totalAmount}\n            </div>\n        </div>\n    )\n}\n\nexport default Wallet","import { useEffect } from \"react\"\nimport { Context } from \"../context/context-provider\"\nimport { fetchControlPanel } from \"../services\"\nimport UnconfirmedTx from \"./unconfirmed-tx\"\nimport Wallet from \"./wallet\"\n\ninterface IControlPanel extends Context{\n}\n\nconst ControlPanel = ({state, dispatch}: IControlPanel) => {\n    useEffect(() => {\n        fetchControlPanel(dispatch)\n    },[dispatch])\n    \n    return (\n        <div className=\"flex flex-col items-center border-4 border-trendyTurquoise rounded-lg fixed right-0 h-screen bottom-0 w-4/12 overflow-y-scroll\">\n            <div className=\"flex mb-16 items-center justify-center mt-10 font-trendyGrey text-3xl font-medium\">\n                Control Panel\n            </div>\n            <div className=\"flex mb-10 items-center justify-center font-trendyGrey text-xl font-medium\">\n                Global Wallets\n            </div>\n            {state?.hostDetails?.map((hostDetail, index) => {\n                return (\n                    <Wallet key={index} dispatch={dispatch} host={hostDetail.hostname} address={hostDetail.address} totalAmount={hostDetail.totalAmount}/>\n                )\n            })}\n            <div className=\"flex mb-10 items-center justify-center font-trendyGrey text-xl font-medium\">\n                Unconfirmed Transaction pool\n            </div>\n            {state?.unconfirmedTxPool?.map((tx, index) => {\n                return (\n                    <UnconfirmedTx key={index} unconfirmedTxData={tx}/>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default ControlPanel","import { useEffect } from \"react\"\nimport { statusMessageAction } from \"../context/actions\"\nimport { Context } from \"../context/context-provider\"\nimport { StatusLevel } from \"../context/reducer\"\nimport './status-message.css'\n\ninterface IStatusMessage extends Context{\n}\n\nconst StatusMessage = ({state, dispatch}: IStatusMessage) => {\n    useEffect(() => {\n        setTimeout(() => dispatch(statusMessageAction({\n            message:\"\",\n            level: StatusLevel.BLANK,\n        })), 10000)\n    },[state.statusMessage])\n    \n    return (\n        <div>\n            <div \n                style={{\n                    position: 'fixed',\n                    zIndex: 1000\n                }} \n                className={`status-message-${state.statusMessage.level} w-8/12 p-10`}\n            >\n                {state?.statusMessage?.message &&\n                    `${state?.statusMessage?.message}`\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default StatusMessage","import './App.css';\nimport Header from './components/header'\nimport { connect } from './context/connector';\nimport { Context } from './context/context-provider';\nimport Blockchain from './components/blockchain';\nimport ControlPanel from './components/control-panel';\nimport StatusMessage from './components/status-message';\n\nfunction App({state, dispatch}: Context) {\n  return (\n    <div className=\"bg-background\">\n      <div className=\"w-8/12\">\n        <StatusMessage {...{state, dispatch}}/>\n      <Header {...{state, dispatch}}/>\n        <Blockchain {...{state, dispatch}}/>\n      </div>\n      <ControlPanel {...{state, dispatch}}/>\n    </div>\n  );\n}\n\nexport default connect(App);\n","import React from 'react'\nimport {GlobalStateContext} from './context-provider'\n\nexport const connect = (Component: any) => {\n    return (props: any) => (\n        <GlobalStateContext.Consumer>\n            {value => {\n                const {state, dispatch} = value\n                return (\n                    <Component {...props} state={state} dispatch={dispatch}/>\n                )\n            }}\n        </GlobalStateContext.Consumer>\n    )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport FirstcoinStateProvider from \"../src/context/context-provider\"\nimport './styles/theme.css'\n\nReactDOM.render(\n  <FirstcoinStateProvider>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </FirstcoinStateProvider>\n,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}